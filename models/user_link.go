// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// UserLink is an object representing the database table.
type UserLink struct {
	ID     int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	URL    string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	Time   time.Time   `boil:"time" json:"time" toml:"time" yaml:"time"`
	UserID null.Int    `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Status null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *userLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLinkColumns = struct {
	ID     string
	URL    string
	Time   string
	UserID string
	Status string
}{
	ID:     "id",
	URL:    "url",
	Time:   "time",
	UserID: "user_id",
	Status: "status",
}

// userLinkR is where relationships are stored.
type userLinkR struct {
	User *User
}

// userLinkL is where Load methods for each relationship are stored.
type userLinkL struct{}

var (
	userLinkColumns               = []string{"id", "url", "time", "user_id", "status"}
	userLinkColumnsWithoutDefault = []string{"url", "time", "status"}
	userLinkColumnsWithDefault    = []string{"id", "user_id"}
	userLinkPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserLinkSlice is an alias for a slice of pointers to UserLink.
	// This should generally be used opposed to []UserLink.
	UserLinkSlice []*UserLink
	// UserLinkHook is the signature for custom UserLink hook methods
	UserLinkHook func(boil.Executor, *UserLink) error

	userLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLinkType                 = reflect.TypeOf(&UserLink{})
	userLinkMapping              = queries.MakeStructMapping(userLinkType)
	userLinkPrimaryKeyMapping, _ = queries.BindMapping(userLinkType, userLinkMapping, userLinkPrimaryKeyColumns)
	userLinkInsertCacheMut       sync.RWMutex
	userLinkInsertCache          = make(map[string]insertCache)
	userLinkUpdateCacheMut       sync.RWMutex
	userLinkUpdateCache          = make(map[string]updateCache)
	userLinkUpsertCacheMut       sync.RWMutex
	userLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userLinkBeforeInsertHooks []UserLinkHook
var userLinkBeforeUpdateHooks []UserLinkHook
var userLinkBeforeDeleteHooks []UserLinkHook
var userLinkBeforeUpsertHooks []UserLinkHook

var userLinkAfterInsertHooks []UserLinkHook
var userLinkAfterSelectHooks []UserLinkHook
var userLinkAfterUpdateHooks []UserLinkHook
var userLinkAfterDeleteHooks []UserLinkHook
var userLinkAfterUpsertHooks []UserLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserLink) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserLink) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserLink) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserLink) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserLink) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserLink) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserLink) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserLink) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserLink) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userLinkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserLinkHook registers your hook function for all future operations.
func AddUserLinkHook(hookPoint boil.HookPoint, userLinkHook UserLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userLinkBeforeInsertHooks = append(userLinkBeforeInsertHooks, userLinkHook)
	case boil.BeforeUpdateHook:
		userLinkBeforeUpdateHooks = append(userLinkBeforeUpdateHooks, userLinkHook)
	case boil.BeforeDeleteHook:
		userLinkBeforeDeleteHooks = append(userLinkBeforeDeleteHooks, userLinkHook)
	case boil.BeforeUpsertHook:
		userLinkBeforeUpsertHooks = append(userLinkBeforeUpsertHooks, userLinkHook)
	case boil.AfterInsertHook:
		userLinkAfterInsertHooks = append(userLinkAfterInsertHooks, userLinkHook)
	case boil.AfterSelectHook:
		userLinkAfterSelectHooks = append(userLinkAfterSelectHooks, userLinkHook)
	case boil.AfterUpdateHook:
		userLinkAfterUpdateHooks = append(userLinkAfterUpdateHooks, userLinkHook)
	case boil.AfterDeleteHook:
		userLinkAfterDeleteHooks = append(userLinkAfterDeleteHooks, userLinkHook)
	case boil.AfterUpsertHook:
		userLinkAfterUpsertHooks = append(userLinkAfterUpsertHooks, userLinkHook)
	}
}

// OneP returns a single userLink record from the query, and panics on error.
func (q userLinkQuery) OneP() *UserLink {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userLink record from the query.
func (q userLinkQuery) One() (*UserLink, error) {
	o := &UserLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_link")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserLink records from the query, and panics on error.
func (q userLinkQuery) AllP() UserLinkSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserLink records from the query.
func (q userLinkQuery) All() (UserLinkSlice, error) {
	var o []*UserLink

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLink slice")
	}

	if len(userLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserLink records in the query, and panics on error.
func (q userLinkQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserLink records in the query.
func (q userLinkQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_link rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userLinkQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userLinkQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_link exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *UserLink) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *UserLink) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userLinkL) LoadUser(e boil.Executor, singular bool, maybeUserLink interface{}) error {
	var slice []*UserLink
	var object *UserLink

	count := 1
	if singular {
		object = maybeUserLink.(*UserLink)
	} else {
		slice = *maybeUserLink.(*[]*UserLink)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userLinkR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userLinkR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(userLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID.Int == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the user_link to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLinks.
// Uses the global database handle.
func (o *UserLink) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the user_link to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLinks.
// Panics on error.
func (o *UserLink) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the user_link to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLinks.
// Uses the global database handle and panics on error.
func (o *UserLink) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the user_link to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLinks.
func (o *UserLink) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID.Int = related.ID
	o.UserID.Valid = true

	if o.R == nil {
		o.R = &userLinkR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserLinks: UserLinkSlice{o},
		}
	} else {
		related.R.UserLinks = append(related.R.UserLinks, o)
	}

	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UserLink) RemoveUserG(related *User) error {
	return o.RemoveUser(boil.GetDB(), related)
}

// RemoveUserP relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *UserLink) RemoveUserP(exec boil.Executor, related *User) {
	if err := o.RemoveUser(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUserGP relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *UserLink) RemoveUserGP(related *User) {
	if err := o.RemoveUser(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserLink) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	o.UserID.Valid = false
	if err = o.Update(exec, "user_id"); err != nil {
		o.UserID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserLinks {
		if o.UserID.Int != ri.UserID.Int {
			continue
		}

		ln := len(related.R.UserLinks)
		if ln > 1 && i < ln-1 {
			related.R.UserLinks[i] = related.R.UserLinks[ln-1]
		}
		related.R.UserLinks = related.R.UserLinks[:ln-1]
		break
	}
	return nil
}

// UserLinksG retrieves all records.
func UserLinksG(mods ...qm.QueryMod) userLinkQuery {
	return UserLinks(boil.GetDB(), mods...)
}

// UserLinks retrieves all the records using an executor.
func UserLinks(exec boil.Executor, mods ...qm.QueryMod) userLinkQuery {
	mods = append(mods, qm.From("\"user_link\""))
	return userLinkQuery{NewQuery(exec, mods...)}
}

// FindUserLinkG retrieves a single record by ID.
func FindUserLinkG(id int, selectCols ...string) (*UserLink, error) {
	return FindUserLink(boil.GetDB(), id, selectCols...)
}

// FindUserLinkGP retrieves a single record by ID, and panics on error.
func FindUserLinkGP(id int, selectCols ...string) *UserLink {
	retobj, err := FindUserLink(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLink(exec boil.Executor, id int, selectCols ...string) (*UserLink, error) {
	userLinkObj := &UserLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_link\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_link")
	}

	return userLinkObj, nil
}

// FindUserLinkP retrieves a single record by ID with an executor, and panics on error.
func FindUserLinkP(exec boil.Executor, id int, selectCols ...string) *UserLink {
	retobj, err := FindUserLink(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserLink) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserLink) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserLink) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserLink) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_link provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userLinkInsertCacheMut.RLock()
	cache, cached := userLinkInsertCache[key]
	userLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userLinkColumns,
			userLinkColumnsWithDefault,
			userLinkColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userLinkType, userLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLinkType, userLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_link\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_link\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_link")
	}

	if !cached {
		userLinkInsertCacheMut.Lock()
		userLinkInsertCache[key] = cache
		userLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserLink record. See Update for
// whitelist behavior description.
func (o *UserLink) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserLink record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserLink) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserLink, and panics on error.
// See Update for whitelist behavior description.
func (o *UserLink) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserLink.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserLink) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userLinkUpdateCacheMut.RLock()
	cache, cached := userLinkUpdateCache[key]
	userLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userLinkColumns,
			userLinkPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_link, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_link\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLinkType, userLinkMapping, append(wl, userLinkPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_link row")
	}

	if !cached {
		userLinkUpdateCacheMut.Lock()
		userLinkUpdateCache[key] = cache
		userLinkUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userLinkQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userLinkQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_link")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserLinkSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserLinkSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserLinkSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLinkSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_link\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userLink slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserLink) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserLink) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserLink) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserLink) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_link provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLinkUpsertCacheMut.RLock()
	cache, cached := userLinkUpsertCache[key]
	userLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userLinkColumns,
			userLinkColumnsWithDefault,
			userLinkColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userLinkColumns,
			userLinkPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_link, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userLinkPrimaryKeyColumns))
			copy(conflict, userLinkPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_link\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userLinkType, userLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLinkType, userLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_link")
	}

	if !cached {
		userLinkUpsertCacheMut.Lock()
		userLinkUpsertCache[key] = cache
		userLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserLink record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserLink) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserLink) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserLink provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserLink record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserLink) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLink) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"user_link\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_link")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userLinkQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userLinkQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_link")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserLinkSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserLinkSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserLink slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserLinkSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLinkSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserLink slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userLink slice")
	}

	if len(userLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserLink) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserLink) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserLink) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserLink provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLink) Reload(exec boil.Executor) error {
	ret, err := FindUserLink(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserLinkSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserLinkSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLinkSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserLinkSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLinkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userLinks := UserLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_link\".* FROM \"user_link\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userLinks)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLinkSlice")
	}

	*o = userLinks

	return nil
}

// UserLinkExists checks if the UserLink row exists.
func UserLinkExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_link\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_link exists")
	}

	return exists, nil
}

// UserLinkExistsG checks if the UserLink row exists.
func UserLinkExistsG(id int) (bool, error) {
	return UserLinkExists(boil.GetDB(), id)
}

// UserLinkExistsGP checks if the UserLink row exists. Panics on error.
func UserLinkExistsGP(id int) bool {
	e, err := UserLinkExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserLinkExistsP checks if the UserLink row exists. Panics on error.
func UserLinkExistsP(exec boil.Executor, id int) bool {
	e, err := UserLinkExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
