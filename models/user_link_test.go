// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testUserLinks(t *testing.T) {
	t.Parallel()

	query := UserLinks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUserLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userLink.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserLinks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserLinkSlice{userLink}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUserLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UserLinkExists(tx, userLink.ID)
	if err != nil {
		t.Errorf("Unable to check if UserLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserLinkExistsG to return true, but got false.")
	}
}
func testUserLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	userLinkFound, err := FindUserLink(tx, userLink.ID)
	if err != nil {
		t.Error(err)
	}

	if userLinkFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUserLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserLinks(tx).Bind(userLink); err != nil {
		t.Error(err)
	}
}

func testUserLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UserLinks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLinkOne := &UserLink{}
	userLinkTwo := &UserLink{}
	if err = randomize.Struct(seed, userLinkOne, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkTwo, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLinkOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userLinkTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserLinks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userLinkOne := &UserLink{}
	userLinkTwo := &UserLink{}
	if err = randomize.Struct(seed, userLinkOne, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}
	if err = randomize.Struct(seed, userLinkTwo, userLinkDBTypes, false, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLinkOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userLinkTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func userLinkBeforeInsertHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterInsertHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterSelectHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkBeforeUpdateHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterUpdateHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkBeforeDeleteHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterDeleteHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkBeforeUpsertHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func userLinkAfterUpsertHook(e boil.Executor, o *UserLink) error {
	*o = UserLink{}
	return nil
}

func testUserLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UserLink{}
	o := &UserLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserLink object: %s", err)
	}

	AddUserLinkHook(boil.BeforeInsertHook, userLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeInsertHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterInsertHook, userLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userLinkAfterInsertHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterSelectHook, userLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userLinkAfterSelectHooks = []UserLinkHook{}

	AddUserLinkHook(boil.BeforeUpdateHook, userLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeUpdateHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterUpdateHook, userLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userLinkAfterUpdateHooks = []UserLinkHook{}

	AddUserLinkHook(boil.BeforeDeleteHook, userLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeDeleteHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterDeleteHook, userLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userLinkAfterDeleteHooks = []UserLinkHook{}

	AddUserLinkHook(boil.BeforeUpsertHook, userLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userLinkBeforeUpsertHooks = []UserLinkHook{}

	AddUserLinkHook(boil.AfterUpsertHook, userLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userLinkAfterUpsertHooks = []UserLinkHook{}
}
func testUserLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx, userLinkColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserLinkToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UserLink
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	local.UserID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserLinkSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserLink)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserLinkToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserLink
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userLinkDBTypes, false, strmangle.SetComplement(userLinkPrimaryKeyColumns, userLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID.Int != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID.Int))
		reflect.Indirect(reflect.ValueOf(&a.UserID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID.Int != x.ID {
			t.Error("foreign key was wrong value", a.UserID.Int, x.ID)
		}
	}
}

func testUserLinkToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserLink
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userLinkDBTypes, false, strmangle.SetComplement(userLinkPrimaryKeyColumns, userLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if a.UserID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserLinks) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userLink.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserLinkSlice{userLink}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUserLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserLinks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userLinkDBTypes = map[string]string{`ID`: `integer`, `Time`: `timestamp without time zone`, `URL`: `character varying`, `UserID`: `integer`}
	_               = bytes.MinRead
)

func testUserLinksUpdate(t *testing.T) {
	t.Parallel()

	if len(userLinkColumns) == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	if err = userLink.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUserLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userLinkColumns) == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userLink := &UserLink{}
	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userLink, userLinkDBTypes, true, userLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userLinkColumns, userLinkPrimaryKeyColumns) {
		fields = userLinkColumns
	} else {
		fields = strmangle.SetComplement(
			userLinkColumns,
			userLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(userLink))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UserLinkSlice{userLink}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUserLinksUpsert(t *testing.T) {
	t.Parallel()

	if len(userLinkColumns) == len(userLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	userLink := UserLink{}
	if err = randomize.Struct(seed, &userLink, userLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userLink.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserLink: %s", err)
	}

	count, err := UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &userLink, userLinkDBTypes, false, userLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserLink struct: %s", err)
	}

	if err = userLink.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserLink: %s", err)
	}

	count, err = UserLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
